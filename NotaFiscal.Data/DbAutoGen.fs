// This code was generated by `SqlHydra.SqlServer` -- v1.2.1.0.
namespace NotaFiscal.Data.DbAutoGen


[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

    type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

    type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getValue o :?> byte[])
            
[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        
        

module dbo =
    [<CLIMutable>]
    type Contato =
        { Id: int
          Telefone: string
          Email: string }

    let Contato = SqlHydra.Query.Table.table<Contato>

    [<CLIMutable>]
    type Endereco =
        { Id: int
          Rua: string
          Numero: string
          Complemento: Option<string>
          Bairro: string
          CodigoMunicipio: string
          Cep: string
          Uf: string }

    let Endereco = SqlHydra.Query.Table.table<Endereco>

    [<CLIMutable>]
    type ErroComunicacao =
        { Id: int
          NotaFiscalServicoId: int
          CodigoErro: string
          Mensagem: string
          Correcao: Option<string> }

    let ErroComunicacao = SqlHydra.Query.Table.table<ErroComunicacao>

    [<CLIMutable>]
    type NaturezaOperacao =
        { Id: int
          Discriminator: string
          Descricao: string }

    let NaturezaOperacao = SqlHydra.Query.Table.table<NaturezaOperacao>

    [<CLIMutable>]
    type NotaFiscalServico =
        { Id: int
          Discriminator: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          DataCriacao: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          DataAlteracao: Option<System.DateTime>
          PrestadorCnpj: string
          PrestadorInscricaoMunicipal: string
          TomadorDiscriminator: string
          TomadorId: Option<int>
          ServicoRegimeEspecialTributacaoId: int
          ServicoNaturezaOperacaoId: int
          TipoRpsId: Option<int>
          RpsNumero: Option<int>
          RpsSerie: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DataEmissao: Option<System.DateTime>
          NumeroNota: Option<int>
          NumeroLote: Option<string>
          CodigoCancelamento: Option<string>
          ValoresServicos: decimal
          ValoresDeducoes: Option<decimal>
          ValoresPis: Option<decimal>
          ValoresCofins: Option<decimal>
          ValoresInss: Option<decimal>
          ValoresIr: Option<decimal>
          ValoresCsll: Option<decimal>
          ValoresIss: decimal
          ValoresIssDiscriminator: string
          ValoresOutrasRetencoes: Option<decimal>
          ValoresDescontoCondicionado: Option<decimal>
          ValoresDescontoIncondicionado: Option<decimal>
          ValoresAliquota: Option<double>
          ItemListaServico: string
          CodigoTributacaoMunicipio: Option<string>
          Discriminacao: string
          MunicipioPrestacaoServico: string
          CodigoCnae: Option<string>
          OptanteSimplesNacional: bool
          IncentivadorCultural: bool }

    let NotaFiscalServico = SqlHydra.Query.Table.table<NotaFiscalServico>

    [<CLIMutable>]
    type RegimeEspecialTributacao =
        { Id: int
          Discriminator: string
          Descricao: string }

    let RegimeEspecialTributacao = SqlHydra.Query.Table.table<RegimeEspecialTributacao>

    [<CLIMutable>]
    type TipoRps =
        { Id: int
          Discriminator: string
          Descricao: string }

    let TipoRps = SqlHydra.Query.Table.table<TipoRps>

    [<CLIMutable>]
    type Tomador =
        { Id: int
          CpfCnpj: string
          InscricaoMunicipal: Option<string>
          RazaoSocial: Option<string>
          EnderecoId: Option<int>
          ContatoId: Option<int> }

    let Tomador = SqlHydra.Query.Table.table<Tomador>

    module Readers =
        type ContatoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.Telefone = RequiredColumn(reader, getOrdinal, reader.GetString, "Telefone")
            member __.Email = RequiredColumn(reader, getOrdinal, reader.GetString, "Email")

            member __.Read() =
                { Contato.Id = __.Id.Read()
                  Telefone = __.Telefone.Read()
                  Email = __.Email.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type EnderecoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.Rua = RequiredColumn(reader, getOrdinal, reader.GetString, "Rua")
            member __.Numero = RequiredColumn(reader, getOrdinal, reader.GetString, "Numero")
            member __.Complemento = OptionalColumn(reader, getOrdinal, reader.GetString, "Complemento")
            member __.Bairro = RequiredColumn(reader, getOrdinal, reader.GetString, "Bairro")
            member __.CodigoMunicipio = RequiredColumn(reader, getOrdinal, reader.GetString, "CodigoMunicipio")
            member __.Cep = RequiredColumn(reader, getOrdinal, reader.GetString, "Cep")
            member __.Uf = RequiredColumn(reader, getOrdinal, reader.GetString, "Uf")

            member __.Read() =
                { Endereco.Id = __.Id.Read()
                  Rua = __.Rua.Read()
                  Numero = __.Numero.Read()
                  Complemento = __.Complemento.Read()
                  Bairro = __.Bairro.Read()
                  CodigoMunicipio = __.CodigoMunicipio.Read()
                  Cep = __.Cep.Read()
                  Uf = __.Uf.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type ErroComunicacaoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.NotaFiscalServicoId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "NotaFiscalServicoId")
            member __.CodigoErro = RequiredColumn(reader, getOrdinal, reader.GetString, "CodigoErro")
            member __.Mensagem = RequiredColumn(reader, getOrdinal, reader.GetString, "Mensagem")
            member __.Correcao = OptionalColumn(reader, getOrdinal, reader.GetString, "Correcao")

            member __.Read() =
                { ErroComunicacao.Id = __.Id.Read()
                  NotaFiscalServicoId = __.NotaFiscalServicoId.Read()
                  CodigoErro = __.CodigoErro.Read()
                  Mensagem = __.Mensagem.Read()
                  Correcao = __.Correcao.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type NaturezaOperacaoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.Discriminator = RequiredColumn(reader, getOrdinal, reader.GetString, "Discriminator")
            member __.Descricao = RequiredColumn(reader, getOrdinal, reader.GetString, "Descricao")

            member __.Read() =
                { NaturezaOperacao.Id = __.Id.Read()
                  Discriminator = __.Discriminator.Read()
                  Descricao = __.Descricao.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type NotaFiscalServicoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.Discriminator = RequiredColumn(reader, getOrdinal, reader.GetString, "Discriminator")
            member __.DataCriacao = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DataCriacao")
            member __.DataAlteracao = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DataAlteracao")
            member __.PrestadorCnpj = RequiredColumn(reader, getOrdinal, reader.GetString, "PrestadorCnpj")
            member __.PrestadorInscricaoMunicipal = RequiredColumn(reader, getOrdinal, reader.GetString, "PrestadorInscricaoMunicipal")
            member __.TomadorDiscriminator = RequiredColumn(reader, getOrdinal, reader.GetString, "TomadorDiscriminator")
            member __.TomadorId = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TomadorId")
            member __.ServicoRegimeEspecialTributacaoId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ServicoRegimeEspecialTributacaoId")
            member __.ServicoNaturezaOperacaoId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ServicoNaturezaOperacaoId")
            member __.TipoRpsId = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TipoRpsId")
            member __.RpsNumero = OptionalColumn(reader, getOrdinal, reader.GetInt32, "RpsNumero")
            member __.RpsSerie = OptionalColumn(reader, getOrdinal, reader.GetString, "RpsSerie")
            member __.DataEmissao = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DataEmissao")
            member __.NumeroNota = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumeroNota")
            member __.NumeroLote = OptionalColumn(reader, getOrdinal, reader.GetString, "NumeroLote")
            member __.CodigoCancelamento = OptionalColumn(reader, getOrdinal, reader.GetString, "CodigoCancelamento")
            member __.ValoresServicos = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ValoresServicos")
            member __.ValoresDeducoes = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresDeducoes")
            member __.ValoresPis = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresPis")
            member __.ValoresCofins = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresCofins")
            member __.ValoresInss = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresInss")
            member __.ValoresIr = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresIr")
            member __.ValoresCsll = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresCsll")
            member __.ValoresIss = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ValoresIss")
            member __.ValoresIssDiscriminator = RequiredColumn(reader, getOrdinal, reader.GetString, "ValoresIssDiscriminator")
            member __.ValoresOutrasRetencoes = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresOutrasRetencoes")
            member __.ValoresDescontoCondicionado = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresDescontoCondicionado")
            member __.ValoresDescontoIncondicionado = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ValoresDescontoIncondicionado")
            member __.ValoresAliquota = OptionalColumn(reader, getOrdinal, reader.GetDouble, "ValoresAliquota")
            member __.ItemListaServico = RequiredColumn(reader, getOrdinal, reader.GetString, "ItemListaServico")
            member __.CodigoTributacaoMunicipio = OptionalColumn(reader, getOrdinal, reader.GetString, "CodigoTributacaoMunicipio")
            member __.Discriminacao = RequiredColumn(reader, getOrdinal, reader.GetString, "Discriminacao")
            member __.MunicipioPrestacaoServico = RequiredColumn(reader, getOrdinal, reader.GetString, "MunicipioPrestacaoServico")
            member __.CodigoCnae = OptionalColumn(reader, getOrdinal, reader.GetString, "CodigoCnae")
            member __.OptanteSimplesNacional = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "OptanteSimplesNacional")
            member __.IncentivadorCultural = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IncentivadorCultural")

            member __.Read() =
                { NotaFiscalServico.Id = __.Id.Read()
                  Discriminator = __.Discriminator.Read()
                  DataCriacao = __.DataCriacao.Read()
                  DataAlteracao = __.DataAlteracao.Read()
                  PrestadorCnpj = __.PrestadorCnpj.Read()
                  PrestadorInscricaoMunicipal = __.PrestadorInscricaoMunicipal.Read()
                  TomadorDiscriminator = __.TomadorDiscriminator.Read()
                  TomadorId = __.TomadorId.Read()
                  ServicoRegimeEspecialTributacaoId = __.ServicoRegimeEspecialTributacaoId.Read()
                  ServicoNaturezaOperacaoId = __.ServicoNaturezaOperacaoId.Read()
                  TipoRpsId = __.TipoRpsId.Read()
                  RpsNumero = __.RpsNumero.Read()
                  RpsSerie = __.RpsSerie.Read()
                  DataEmissao = __.DataEmissao.Read()
                  NumeroNota = __.NumeroNota.Read()
                  NumeroLote = __.NumeroLote.Read()
                  CodigoCancelamento = __.CodigoCancelamento.Read()
                  ValoresServicos = __.ValoresServicos.Read()
                  ValoresDeducoes = __.ValoresDeducoes.Read()
                  ValoresPis = __.ValoresPis.Read()
                  ValoresCofins = __.ValoresCofins.Read()
                  ValoresInss = __.ValoresInss.Read()
                  ValoresIr = __.ValoresIr.Read()
                  ValoresCsll = __.ValoresCsll.Read()
                  ValoresIss = __.ValoresIss.Read()
                  ValoresIssDiscriminator = __.ValoresIssDiscriminator.Read()
                  ValoresOutrasRetencoes = __.ValoresOutrasRetencoes.Read()
                  ValoresDescontoCondicionado = __.ValoresDescontoCondicionado.Read()
                  ValoresDescontoIncondicionado = __.ValoresDescontoIncondicionado.Read()
                  ValoresAliquota = __.ValoresAliquota.Read()
                  ItemListaServico = __.ItemListaServico.Read()
                  CodigoTributacaoMunicipio = __.CodigoTributacaoMunicipio.Read()
                  Discriminacao = __.Discriminacao.Read()
                  MunicipioPrestacaoServico = __.MunicipioPrestacaoServico.Read()
                  CodigoCnae = __.CodigoCnae.Read()
                  OptanteSimplesNacional = __.OptanteSimplesNacional.Read()
                  IncentivadorCultural = __.IncentivadorCultural.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type RegimeEspecialTributacaoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.Discriminator = RequiredColumn(reader, getOrdinal, reader.GetString, "Discriminator")
            member __.Descricao = RequiredColumn(reader, getOrdinal, reader.GetString, "Descricao")

            member __.Read() =
                { RegimeEspecialTributacao.Id = __.Id.Read()
                  Discriminator = __.Discriminator.Read()
                  Descricao = __.Descricao.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type TipoRpsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.Discriminator = RequiredColumn(reader, getOrdinal, reader.GetString, "Discriminator")
            member __.Descricao = RequiredColumn(reader, getOrdinal, reader.GetString, "Descricao")

            member __.Read() =
                { TipoRps.Id = __.Id.Read()
                  Discriminator = __.Discriminator.Read()
                  Descricao = __.Descricao.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type TomadorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Id")
            member __.CpfCnpj = RequiredColumn(reader, getOrdinal, reader.GetString, "CpfCnpj")
            member __.InscricaoMunicipal = OptionalColumn(reader, getOrdinal, reader.GetString, "InscricaoMunicipal")
            member __.RazaoSocial = OptionalColumn(reader, getOrdinal, reader.GetString, "RazaoSocial")
            member __.EnderecoId = OptionalColumn(reader, getOrdinal, reader.GetInt32, "EnderecoId")
            member __.ContatoId = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ContatoId")

            member __.Read() =
                { Tomador.Id = __.Id.Read()
                  CpfCnpj = __.CpfCnpj.Read()
                  InscricaoMunicipal = __.InscricaoMunicipal.Read()
                  RazaoSocial = __.RazaoSocial.Read()
                  EnderecoId = __.EnderecoId.Read()
                  ContatoId = __.ContatoId.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazydboContato = lazy (dbo.Readers.ContatoReader(reader, buildGetOrdinal 3))
    let lazydboEndereco = lazy (dbo.Readers.EnderecoReader(reader, buildGetOrdinal 8))
    let lazydboErroComunicacao = lazy (dbo.Readers.ErroComunicacaoReader(reader, buildGetOrdinal 5))
    let lazydboNaturezaOperacao = lazy (dbo.Readers.NaturezaOperacaoReader(reader, buildGetOrdinal 3))
    let lazydboNotaFiscalServico = lazy (dbo.Readers.NotaFiscalServicoReader(reader, buildGetOrdinal 37))
    let lazydboRegimeEspecialTributacao = lazy (dbo.Readers.RegimeEspecialTributacaoReader(reader, buildGetOrdinal 3))
    let lazydboTipoRps = lazy (dbo.Readers.TipoRpsReader(reader, buildGetOrdinal 3))
    let lazydboTomador = lazy (dbo.Readers.TomadorReader(reader, buildGetOrdinal 6))
    member __.``dbo.Contato`` = lazydboContato.Value
    member __.``dbo.Endereco`` = lazydboEndereco.Value
    member __.``dbo.ErroComunicacao`` = lazydboErroComunicacao.Value
    member __.``dbo.NaturezaOperacao`` = lazydboNaturezaOperacao.Value
    member __.``dbo.NotaFiscalServico`` = lazydboNotaFiscalServico.Value
    member __.``dbo.RegimeEspecialTributacao`` = lazydboRegimeEspecialTributacao.Value
    member __.``dbo.TipoRps`` = lazydboTipoRps.Value
    member __.``dbo.Tomador`` = lazydboTomador.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "dbo.Contato", false -> __.``dbo.Contato``.Read >> box
        | "dbo.Contato", true -> __.``dbo.Contato``.ReadIfNotNull >> box
        | "dbo.Endereco", false -> __.``dbo.Endereco``.Read >> box
        | "dbo.Endereco", true -> __.``dbo.Endereco``.ReadIfNotNull >> box
        | "dbo.ErroComunicacao", false -> __.``dbo.ErroComunicacao``.Read >> box
        | "dbo.ErroComunicacao", true -> __.``dbo.ErroComunicacao``.ReadIfNotNull >> box
        | "dbo.NaturezaOperacao", false -> __.``dbo.NaturezaOperacao``.Read >> box
        | "dbo.NaturezaOperacao", true -> __.``dbo.NaturezaOperacao``.ReadIfNotNull >> box
        | "dbo.NotaFiscalServico", false -> __.``dbo.NotaFiscalServico``.Read >> box
        | "dbo.NotaFiscalServico", true -> __.``dbo.NotaFiscalServico``.ReadIfNotNull >> box
        | "dbo.RegimeEspecialTributacao", false -> __.``dbo.RegimeEspecialTributacao``.Read >> box
        | "dbo.RegimeEspecialTributacao", true -> __.``dbo.RegimeEspecialTributacao``.ReadIfNotNull >> box
        | "dbo.TipoRps", false -> __.``dbo.TipoRps``.Read >> box
        | "dbo.TipoRps", true -> __.``dbo.TipoRps``.ReadIfNotNull >> box
        | "dbo.Tomador", false -> __.``dbo.Tomador``.Read >> box
        | "dbo.Tomador", true -> __.``dbo.Tomador``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Microsoft.Data.SqlClient.SqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<byte> then Some(wrap reader.GetByte)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<System.Single> then Some(wrap reader.GetFloat)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.DateTimeOffset> then Some(wrap reader.GetDateTimeOffset)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetTimeOnly)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<obj> then Some(wrap reader.GetValue)
        else None

    static member Read(reader: Microsoft.Data.SqlClient.SqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
